{% set name = "llama.cpp" %}
{% set version = "0.0.4153" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/ggerganov/llama.cpp/archive/b{{ version.split(".")[-1] }}.tar.gz
  sha256: 331d305e1f6314300a2d0f320da3eeb51f6ecc4aaa10c985e2b414fc012b793c

build:
  number: 1
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                 # [(osx and x86_64) or cuda_compiler_version == "None"]
  string: mps_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                 # [osx and arm64]

  script:
    - LLAMA_ARGS="-DLLAMA_BUILD_TESTS=OFF"              # [unix]
    - set LLAMA_ARGS=-DLLAMA_BUILD_TESTS=OFF            # [win]
    {% macro llama_args(value) -%}
    - LLAMA_ARGS="${LLAMA_ARGS} -DLLAMA_{{ value }}"    # [unix]
    - set LLAMA_ARGS=%LLAMA_ARGS% -DLLAMA_{{ value }}   # [win]
    {%- endmacro %}
    {% macro cmake_args(value) -%}
    - LLAMA_ARGS="${LLAMA_ARGS} -D{{ value }}"          # [unix]
    - set LLAMA_ARGS=%LLAMA_ARGS% -D{{ value }}         # [win]
    {%- endmacro %}

    {{ cmake_args("BUILD_SHARED_LIBS=ON") }}

    {{ llama_args("NATIVE=OFF") }}      # [(osx and arm64) or win]
    {{ llama_args("AVX=OFF") }}         # [osx and arm64]
    {{ llama_args("AVX2=OFF") }}        # [osx and arm64]
    {{ llama_args("FMA=OFF") }}         # [osx and arm64]
    {{ llama_args("F16C=OFF") }}        # [osx and arm64]
    {{ llama_args("METAL=ON") }}        # [osx and arm64]
    {{ llama_args("METAL=OFF") }}       # [osx and x86_64]
    {{ llama_args("ACCELERATE=ON") }}   # [osx]

    {{ llama_args("CUDA=ON") }}                       # [cuda_compiler_version != "None"]
    {{ cmake_args("CMAKE_CUDA_ARCHITECTURES=all") }}  # [cuda_compiler_version != "None"]

    {{ llama_args("BLAS=ON") }}                     # [not osx and cuda_compiler_version == "None"]
    {{ llama_args("BLAS_VENDOR=Intel10_64_dyn") }}  # [not osx and cuda_compiler_version == "None" and blas_impl == "mkl"]

    - echo $LLAMA_ARGS  # [unix]
    - set LLAMA_ARGS    # [win]

    - cmake -S . -B build -G Ninja %CMAKE_ARGS% %LLAMA_ARGS%    # [win]
    - cmake -S . -B build -G Ninja ${CMAKE_ARGS} ${LLAMA_ARGS}  # [unix]
    - cmake --build build
    - cmake --install build 
  
  missing_dso_whitelist:
    - "*/nvcuda.dll"    # [win]
    - "*/libcuda.so.1"  # [linux]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                        # [cuda_compiler_version != "None"]
    - cmake
    - git
    - ninja
    - pkgconfig
  host:
    # NOTE: Without cuda-version, we are installing cuda-toolkit 11.8 instead of 11.2!
    - cuda-version     {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - cuda-cudart-dev  {{ cuda_compiler_version }}  # [(cuda_compiler_version or "").startswith("12")]
    - libcublas-dev    {{ cuda_compiler_version }}  # [(cuda_compiler_version or "").startswith("12")]

    - blas-devel * *{{ blas_impl }}                 # [not osx and cuda_compiler_version == "None" and blas_impl == "mkl"]
    - mkl-devel {{ mkl }}                           # [not osx and cuda_compiler_version == "None" and blas_impl == "mkl"]
  run:
    - cuda-version {{ cuda_compiler_version }}      # [cuda_compiler_version != "None"]

    - llvm-openmp                                   # [linux and cuda_compiler_version == "None" and blas_impl == "mkl"]
    - __cuda                                        # [cuda_compiler_version != "None"]
    - cuda-nvcc-tools                               # [(cuda_compiler_version or "").startswith("12")]

test:
  requires:
    - cuda-version     {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
  commands:
    - llama-cli --help                                   # [build_platform == target_platform and cuda_compiler_version == "None"]
    - llama-server --help                                 # [build_platform == target_platform and cuda_compiler_version == "None"]

about:
  home: https://github.com/ggerganov/llama.cpp
  summary: Port of Facebook's LLaMA model in C/C++
  license: MIT
  license_family: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - jonashaag
    - frankier
    - sodre
